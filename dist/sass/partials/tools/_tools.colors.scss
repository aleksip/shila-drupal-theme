// @file
// partials/tools/_tools.colors.scss


/// Checks for a valid CSS color.
///
/// @argument {string} $color
///
/// @return {boolean}
///
/// @access private

@function _shila-is-color($color) {
  @return (type-of($color) == color) or ($color == "currentColor");
}

/// Mixes a color with black.
///
/// @argument {color} $color
///
/// @argument {number (percentage)} $percent
///   The amount of black to be mixed in.
///
/// @return {color}
///
/// @example scss
///   .element {
///     background-color: shade(#ffbb52, 60%);
///   }
///
///   // CSS Output
///   .element {
///     background-color: #664a20;
///   }

@function shila-shade(
  $color,
  $percent
) {

  @if not _shila-is-color($color) {
    @error "`#{$color}` is not a valid color for the `$color` argument in " +
           "the `shade` mixin.";
  } @else {
    @return mix(#000, $color, $percent);
  }
}

/// Mixes a color with white.
///
/// @argument {color} $color
///
/// @argument {number (percentage)} $percent
///   The amount of white to be mixed in.
///
/// @return {color}
///
/// @example scss
///   .element {
///     background-color: tint(#6ecaa6, 40%);
///   }
///
///   // CSS Output
///   .element {
///     background-color: #a8dfc9;
///   }

@function shila-tint(
  $color,
  $percent
) {

  @if not _shila-is-color($color) {
    @error "`#{$color}` is not a valid color for the `$color` argument in " +
           "the `tint` mixin.";
  } @else {
    @return mix(#fff, $color, $percent);
  }
}
